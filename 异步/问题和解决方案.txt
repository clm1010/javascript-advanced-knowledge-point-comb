1.什么是单线程，和异步有什么关系
答：单线程就是同时只做一件事，两段JS不能同时执行。
单线程 只有一个线程，只能做一件事。（同一个时间只能做一件事情）

为什么JS是单线程?
原因 避免DOM渲染的冲突
·浏览器需要渲染DOM
·JS可以修改DOM结构
·JS执行的时候，浏览器DOM渲染会暂停
·两段JS也不能同时执行（都修改DOM就冲突了）
·H5中有个webworker支持多线程，但是不能访问DOM

解决方案 就是 异步 （异步是JS单线程的一个解决方案）
·先不管它，先让其它JS代码运行（例如：setTimeout ajax）
异步的问题：
问题一：没按照书写方式执行，可读性差
问题二：callback中不容易模块化（callback就是当异步完事之后，我要执行的这个函数就是callback，例如 setTimeout中的function()和ajax中 success的function()）


2.什么是event-loop
文字解释
·事件轮询，JS实现异步的具体解放方案
·同步代码，直接执行（不是在异步中的例如 setTimeout setInterval Ajax)
·异步函数先放在异步队列中（先放到异步队列中，分为几种情况，1.setTimeout没有延迟时间可以直接放到异步队列中，如果有延迟时间等待延迟时间结束后再放到异步队列中，2.Ajax等待响应成功或者失败后在放到异步队列中。）
·待同步函数执行完毕，轮询执行异步队列的函数


3.是否用过jQuery的Deferred
jQuery 1.5 后 对ajax的改变 jQuery-Deferred
jQuery 1.5之前 这种方式对修改开放，对扩展封闭
jQuery-Deferred 缺点 resolve()和reject()曝漏在外
如果 在开发中 直接调用 waitHandle() 返回的 Deferred，reject();那么这种方式虽然成功了，但是 主动调用 reject() 失败。

说明如何简单封装的、使用Deferred
function waitHandle() {
  var dtd = $.Deferred();
  var wait = function(dtd){
    var task = function(){
      console.log("执行成功");
      //成功返回resolve()
      dtd.resolve();
      //失败返回reject()
      dtd.reject()
    }
    //这里调用promise() 这样外界无法调用 resolve()和reject()
    return dtd.promise();
  }
  return dtd
}
//开放封闭原则 对扩展开放，对修改封闭
var w = waitHandle();
$.when(w).then(function(){
  console.log('ok 1');
},function(){
  console.log('erro 1')
})
说明Deferred和Promise区别
Deferred 有主动触发的函数 resolve() reject() 也有被动监听的函数 then() done() fail() 这些函数混在一起不好，容易被外界篡改
Promise() 只能被动监听 无法主动去修改

4.Promise的基本使用和原理

Promise状态变化
·pending (在刚刚传入进去，还没有开始加载)
·fulfilled (是成功)
·rejected (是失败)
·初始状态是 pending
· pending 变为 fulfilled，或者 pending 变为 rejected
·状态变化不可逆


5.async/await（和Promise的区别、联系）
